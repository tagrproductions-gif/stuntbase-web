'use server'

import { createClient } from '@/lib/supabase/server'
import { ProfileData, SkillData, CertificationData } from '@/lib/validations/profile'

import { redirect } from 'next/navigation'

export async function createProfileAction(
  profileData: ProfileData, 
  skills: SkillData[], 
  certifications: CertificationData[], 
  resumeUploadResult?: { url: string; fileName: string; fileSize: number } | null
) {
  const supabase = createClient()

  // Get the current user
  const { data: { user }, error: userError } = await supabase.auth.getUser()
  
  if (userError || !user) {
    throw new Error('Not authenticated')
  }

  // Use the provided resume upload result
  const resumeData = resumeUploadResult

  // Create the profile with server-side authentication
  // Note: id will be auto-generated by the database
  const { data: profile, error: profileError } = await supabase
    .from('profiles')
    .insert({
      user_id: user.id,
      full_name: profileData.full_name,
      email: profileData.email,
      // Convert empty strings to null for optional fields
      bio: profileData.bio || null,
      location: profileData.location || null,
      secondary_location: profileData.secondary_location || null,
      // New structured location fields
      primary_location_structured: profileData.primary_location_structured || null,
      secondary_location_structured: profileData.secondary_location_structured || null,
      travel_radius: profileData.travel_radius || 'local',
      phone: profileData.phone || null,
      hair_color: profileData.hair_color || null,
      ethnicity: profileData.ethnicity || null,
      gender: profileData.gender || null,
      union_status: profileData.union_status || null,
      loan_out_status: profileData.loan_out_status || 'Unknown',
      website: profileData.website || null,
      imdb_url: profileData.imdb_url || null,
      reel_url: profileData.reel_url || null,
      // Resume data
      resume_url: resumeData?.url || null,
      resume_filename: resumeData?.fileName || null,
      resume_file_size: resumeData?.fileSize || null,
      resume_uploaded_at: resumeData ? new Date().toISOString() : null,
      availability_status: profileData.availability_status || null,
      // Convert NaN to null for number fields
      height_feet: isNaN(profileData.height_feet as number) ? null : profileData.height_feet,
      height_inches: isNaN(profileData.height_inches as number) ? null : profileData.height_inches,
      weight_lbs: isNaN(profileData.weight_lbs as number) ? null : profileData.weight_lbs,
      // Universal wardrobe fields
      shirt_neck: isNaN(profileData.shirt_neck as number) ? null : profileData.shirt_neck,
      shirt_sleeve: isNaN(profileData.shirt_sleeve as number) ? null : profileData.shirt_sleeve,
      pants_waist: isNaN(profileData.pants_waist as number) ? null : profileData.pants_waist,
      pants_inseam: isNaN(profileData.pants_inseam as number) ? null : profileData.pants_inseam,
      shoe_size: isNaN(profileData.shoe_size as number) ? null : profileData.shoe_size,
      t_shirt_size: profileData.t_shirt_size || null,
      hat_size: profileData.hat_size || null,
      glove_size: profileData.glove_size || null,
      // Male-specific wardrobe fields
      jacket_size: isNaN(profileData.jacket_size as number) ? null : profileData.jacket_size,
      jacket_length: profileData.jacket_length || null,
      // Female-specific wardrobe fields
      dress_size: isNaN(profileData.dress_size as number) ? null : profileData.dress_size,
      pants_size: isNaN(profileData.pants_size as number) ? null : profileData.pants_size,
      underbust: isNaN(profileData.underbust as number) ? null : profileData.underbust,
      hips: isNaN(profileData.hips as number) ? null : profileData.hips,
      chest: isNaN(profileData.chest as number) ? null : profileData.chest,
      waist: isNaN(profileData.waist as number) ? null : profileData.waist,
      is_public: profileData.is_public,
    })
    .select()
    .single()

  if (profileError || !profile) {
    throw new Error(profileError?.message || 'Failed to create profile')
  }

  // Add skills if any
  if (skills.length > 0) {
    const skillData = skills.map(skill => ({
      profile_id: profile.id,
      skill_id: skill.skill_id,
      proficiency_level: skill.proficiency_level
    }))
    
    const { error: skillsError } = await supabase
      .from('profile_skills')
      .insert(skillData)

    if (skillsError) {
      console.error('Error adding skills:', skillsError)
      // Don't throw - profile creation succeeded
    }
  }

  // Add certifications if any
  if (certifications.length > 0) {
    const certData = certifications.map(cert => ({
      profile_id: profile.id,
      certification_id: cert.certification_id,
      date_obtained: cert.date_obtained || null,
      expiry_date: cert.expiry_date || null,
      certification_number: cert.certification_number || null
    }))
    
    const { error: certsError } = await supabase
      .from('profile_certifications')
      .insert(certData)

    if (certsError) {
      console.error('Error adding certifications:', certsError)
      // Don't throw - profile creation succeeded
    }
  }

  return profile
}